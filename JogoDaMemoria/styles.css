* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    height: 100vh;
    display: flex;
    background-color: rgb(54, 189, 189);
}

.memory-game {
    height: 640px;
    width: 640px;
    margin: auto;
    display: flex;
    flex-wrap: wrap;
    perspective: 1000px; /*eixo Z. Quanto maior, maior o efeito 3d*/
}

.card {
    height: calc(33.333% - 10px);
    width: calc(25% - 10px);
    margin: 5px;
    position: relative; /**/
    box-shadow: 1px 1px 1px rgba(1, 1, 1, .3);
    cursor: pointer;
    transform: scale(1);
    transform-style: preserve-3d; /*para o perspective funcionar. Ele não vai deixar o elemento achatado no plano. em 2d*/
    transition: transform .9s; /*animação flipcard*/
}

.card:active {
    transform: scale(0.97);
    transition: transform .3s;
}

.card-front, .card-back {
    width: 100%;
    height: 100%;
    padding: 20px; /*para n ficar colada na borda*/
    position: absolute;
    border-radius: 5px;
    background: #ffffff;
    backface-visibility: hidden; /*todo elemento virado ao contrário é ele espelhado, então escondemos o verso.*/
}

.card-front { /*parte da frente*/
    transform: rotateY(180deg); /*roda a carta ao clicar, mostrando o verso do card-front com visibility hidden - apagar esse bloco .card-front do CSS para ver o que acontece*/
}

/* flip card animation */
.card.flip {
    transform: rotateY(180deg);
}